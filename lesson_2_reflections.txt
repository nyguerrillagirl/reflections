What happens when you initialize a repository? Why do you need to do it?

Running the git command "git init" initialize a repository. That is, hidden directory
is created name .git containing all the metadata Git uses to manage our new 
repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains the set of files "to be committed" or "added" to the repository. So the file in its current state
is not yet in the repository if it is in the staging area. The working directory contains the current set of
files that you are working on and may not be the same set of files in the working area or repository.

How can you use the staging area to make sure you have one commit per logical change?

You place/add into the staging area all the files that are related to one logical change so that
when you do a commit all files related to a single logical change are updated or placed into
the repository as a single unit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A branch allows you to take the current code base on the master branch and experiment and 
explore new ideas and features without affecting the master branch.  Branches are useful for keeping experimental code or features that we do not intend to use in the master branch (or may want to fold or merge in the future) independent from the master branch.

How do the diagrams help you visualize the branch structure?
The diagrams provides a view of the commit history for each branch. That is what commits are within a branch tree. It reveals the "detached Head" changes. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together adds the changes/commits made in one branch into the master branch. In addition, any changes made in the master branch since the "merged" branch was made and worked
on will also be committed.  The merge commit branch will have two commit parents one for the changes made on the master branch and the other for the changes made in the "merged" branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The pros of doing Git's automatic merging is that the basic rules it follows makes sense and 
is consistent. In addition, it gets the job done quicky. In the cases where there is some
ambiguity in performing the merge the code in question is flagged and we can resolve.
The cons of automatic merging is that the decision is not within our complete control and 
management. But I think overall it provides productivity improvements.