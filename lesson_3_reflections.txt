1. When would you want to create a remote repository rather than keeping all your work local?

A remote repository makes sense when you want to share your work with others or collaborate
with team members on a project. In addition, if you work on different machines (one at home and a different one at the job) having a remote repository makes sense.

2. Why might you want to always pull changes manually rather than having Git automatically stay
up-to-date with your remote directory?

Manually pulling the changes allows the developer to decide if and when they want to update their remote directory. It can get confusing if Git did it automatically since files being worked on or not known to the user can suddenly start to appear in the commit history. This may impact the current work being done.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork creates a copy of a repository from one GitHub account to my own. It bascially clones the source repository into GitHub. It has the advantages of referencing the source repository and allows me to request that changes I make to my own repository be considered for adoption in the original repository.

I can clone any repository to my desktop. It is basically a copy. If I clone from my own GitHub repository the local repository is automatically setup as a remote. This will allow me to make changes locally and push back to the master branch on GitHub.  Creating a clone of someone else's repository does not allow GitHub to establish a connection or reference to the source repository.

A branch is an indendent commit history (from the master) that allows me to explore changes to code without affecting the master branch.  I can choose to incorporate the changes by merging back to the master branch or incorporate changes to the master branch into my branch. The nice thing about branches is that they can be labeled with an informative name to reflect the reason for their creation.

4. What is the benefit of having a copy of the last known state of the remote stored locally?

Not sure.

I would be guessing here. Having the last known state of a remote stored locally makes it easier to make changes/do work and test before I add to the master branch on GitHub. 

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I would always collaborate using some source control mechanism, otherwise tracking changes made by different developers would be difficult to next to impossible to track and manage using the manual approach. We would be forced to only have one developer touching or updating the source files at a time.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When collaborating on a project it is wise to make changes on a separate branch in order to manage/coordinate the changes that get added to the master.  Fellow developers may need to approve the change (it also allows a type of code/doc review) to take place. Doing changes directly in the master avoids all the work to merge branches but can potentially create problems especially in the case when mutliple developers are working on the project.